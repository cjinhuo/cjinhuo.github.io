---
import BaseHead from "../components/BaseHead.astro";
import Header from "@/components/Header/Header.astro";
import Footer from "../components/Footer.astro";
import "github-markdown-css";
import { Code } from "astro/components";
const {
  content: { title, duration, description, pubDate, updatedDate, heroImage },
} = Astro.props;
---

<html lang="en">
  <head>
    <BaseHead title={title} description={description} />
    <style>
      .title {
        font-size: 2em;
        margin: 0.25em 0 0;
      }
      hr {
        border-top: 1px solid #ddd;
        margin: 1rem 0;
      }
    </style>
  </head>

  <body class="bg-skin-background">
    <Header />
    <main>
      <article
        class="prose prose-slate prose-h1:my-5 prose-h2:my-4 prose-h3:my-3 prose-h4:my-2 prose-h5:my-1 prose-img:rounded-md dark:prose-invert max-w-content m-auto my-6"
      >
        {heroImage && <img src={heroImage} alt="" />}
        <h1 class="title">{title}</h1>
        <span
          >{pubDate && <time>{pubDate}</time>}{duration && `,${duration}`}</span
        >
        <Code
          code={`const initMiniProgram = () => {
  let adapter = {} as PlatformAdapterType
  const set = (platformAdapterContainers: InitialAdapterParamType) => {
    if (!getInstanceInfo().platform) throw Error(NotSupportMsg)
    if (!Array.isArray(platformAdapterContainers) || !platformAdapterContainers.length) return null

    const adapterContainer = platformAdapterContainers.find(
      (adapterContainer) => adapterContainer.platform === getInstanceInfo().platform,
    )
    return adapterContainer && (adapter = adapterContainer.adapterCtor())
  }
  const get = () => adapter
  return [set, get] as const
}`}
          lang="ts"
          theme="dark-plus"
        />
        {
          updatedDate && (
            <div>
              Last updated on <time>{updatedDate}</time>
            </div>
          )
        }
        <hr />
        <slot />
      </article>
    </main>
    <Footer />
  </body>
</html>
